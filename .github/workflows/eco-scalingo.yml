on:
  workflow_call:
    inputs:
      number_of_container:
        description: 'Nombre de containers souhaités'
        required: true
        type: number

      scalingo_app_name:
        description: "Nom de l'application Scalingo"
        required: true
        type: string

      scalingo_region:
        description: "Nom de la région Scalingo (osc-fr1 ou osc-secnum-fr1)"
        required: false
        default: "osc-fr1"
        type: string

      statuscake_uptime_check_id:
        description: 'ID de la sonde StatusCake'
        required: false
        type: number

    secrets:
      scalingo_api_token:
        description: "Token d'accès à l'API Scalingo"
        required: true

      statuscake_api_token:
        description: "Token d'accès à l'API StatusCake"
        required: false

jobs:
  pause-recette:
    runs-on: ubuntu-latest

    steps:
      - name: Configurer la CLI Scalingo
        uses: scalingo-community/setup-scalingo@v0.1.1
        with:
          api_token: ${{ secrets.scalingo_api_token }}
          region: ${{ inputs.scalingo_region }}
          app_name: ${{ inputs.scalingo_app_name }}

      - name: Mettre en pause la sonde StatusCake
        # when schedule on evening
        if: inputs.statuscake_uptime_check_id != null && inputs.number_of_container == 0
        env:
          STATUSCAKE_API_TOKEN: ${{ secrets.STATUSCAKE_API_TOKEN }}
          STATUSCAKE_UPTIME_CHECK_ID: ${{ inputs.statuscake_uptime_check_id }}
        run: |
          curl -X PUT https://api.statuscake.com/v1/uptime/${STATUSCAKE_UPTIME_CHECK_ID} \
            -H "Authorization: Bearer ${STATUSCAKE_API_TOKEN}" \
            -d "paused=true"

      - name: Mettre en pause ou redémarrer les containers de l'application
        uses: nick-fields/retry@v3
        with:
          max_attempts: 20
          retry_on: error
          timeout_seconds: 30
          retry_wait_seconds: 30
          command: |
            echo "Mise en pause de l'app ${{ inputs.scalingo_app_name }}"

            SCALE_RESULT=$(scalingo scale --synchronous web:${{ inputs.number_of_container }} 2>&1)

            if [ $? -ne 0 ]; then

              if [[ $SCALE_RESULT == *"no change in containers formation"* ]]; then
                echo "L'app ${{ inputs.scalingo_app_name }} a déjà ${{ inputs.number_of_container }} container(s)."
              else
                echo $SCALE_RESULT
                exit 1
              fi
            fi

      - name: Mettre en pause ou redémarrer les review apps associées à l'application
        env:
          APP_NAME: ${{ inputs.scalingo_app_name }}
          CONTAINER_NUMBER: ${{ inputs.number_of_container }}
        run: |
          for review_app in $(scalingo review-apps | grep -v "No review app" | grep "$APP_NAME" | awk -F' | ' '{print $2}'); do

            echo "Mise en pause de la review app ${review_app}"

            SCALE_RESULT=$(scalingo --app "${review_app}" scale --synchronous web:${CONTAINER_NUMBER} 2>&1)

            if [ $? -ne 0 ]; then

              if [[ $SCALE_RESULT == *"no change in containers formation"* ]]; then
                echo "La review app ${review_app} est déjà mise en pause ($CONTAINER_NUMBER container(s))."
              else
                echo $SCALE_RESULT
                exit 1
              fi
            fi
          done

      - name: Attendre que l'application soit démarrée
        if: inputs.number_of_container >= 1
        run: |
          while [[ $(scalingo ps | grep web | grep -c running) -eq 0 ]]; do
            echo "En attente du démarrage des containers..."
            sleep 5
          done
          echo "Au moins un container est démarré. On peut continuer."
          sleep 2
        shell: bash

      - name: Relancer la sonde StatusCake
        # when schedule on morning or manually trigerred
        if: inputs.statuscake_uptime_check_id != null && inputs.number_of_container >= 1
        env:
          STATUSCAKE_API_TOKEN: ${{ secrets.STATUSCAKE_API_TOKEN }}
          STATUSCAKE_UPTIME_CHECK_ID: ${{ inputs.statuscake_uptime_check_id }}
        run: |
          curl -X PUT https://api.statuscake.com/v1/uptime/${STATUSCAKE_UPTIME_CHECK_ID} \
            -H "Authorization: Bearer ${STATUSCAKE_API_TOKEN}" \
            -d "paused=false"

      - name: Nettoyer les logs de run trop anciennes
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 7
          keep_minimum_runs: 2
          delete_workflow_pattern: ${{ github.workflow }}
